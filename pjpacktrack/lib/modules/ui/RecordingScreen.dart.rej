diff a/pjpacktrack/lib/modules/ui/RecordingScreen.dart b/pjpacktrack/lib/modules/ui/RecordingScreen.dart	(rejected hunks)
@@ -1,87 +1,89 @@
 import 'dart:io';
 
 import 'package:cloud_firestore/cloud_firestore.dart';
 import 'package:firebase_auth/firebase_auth.dart';
 import 'package:flutter/material.dart';
 import 'package:camera/camera.dart';
 import 'package:mobile_scanner/mobile_scanner.dart';
 import 'package:aws_storage_service/aws_storage_service.dart';
 import 'package:pjpacktrack/modules/ui/aws_config.dart';
 import 'package:pjpacktrack/modules/ui/delivery_option.dart';
+import 'package:pjpacktrack/modules/ui/fake_api/product_code_service.dart';
 import 'package:pjpacktrack/modules/ui/video_upload.dart';
 
 class RecordingScreen extends StatefulWidget {
   final List<CameraDescription> cameras;
   final String storeId;
 
   RecordingScreen({super.key, required this.cameras, required this.storeId});
 
   @override
   _RecordingScreenState createState() => _RecordingScreenState();
 }
 
 class _RecordingScreenState extends State<RecordingScreen> {
   CameraController? _cameraController;
   MobileScannerController? _scannerController;
   bool _isRecording = false;
   bool _isScanning = true;
   bool _isFlashOn = false;
   bool _isQRCode = false;
   bool _continuousRecording = false;
   String? _lastScannedCode;
   String? _selectedDeliveryOption;
   final List<String> _videoPaths = [];
   double _currentBrightness = 0;
   String _brightnessWarning = "";
   static const String STOP_CODE = "STOP";
   bool _isContinuousScanning = false;
+  String? _productName;
   final AwsCredentialsConfig credentialsConfig = AwsCredentialsConfig(
     accessKey: AwsConfig.accessKey,
     secretKey: AwsConfig.secretKey,
     bucketName: AwsConfig.bucketName,
     region: AwsConfig.region,
   );
 
   @override
   void initState() {
     super.initState();
     _initializeScannerController();
   }
 
   void _initializeScannerController() {
     _scannerController = MobileScannerController(
       detectionSpeed: DetectionSpeed.normal,
       facing: CameraFacing.back,
       formats: [
         BarcodeFormat.qrCode,
         BarcodeFormat.code128,
         BarcodeFormat.code39,
         BarcodeFormat.code93,
         BarcodeFormat.codabar,
         BarcodeFormat.ean8,
         BarcodeFormat.ean13,
         BarcodeFormat.upcA,
         BarcodeFormat.upcE,
       ],
     );
   }
 
   Future<void> _initializeCamera() async {
     try {
       if (_cameraController == null ||
           !_cameraController!.value.isInitialized) {
         _cameraController = CameraController(
           widget.cameras[0],
           ResolutionPreset.veryHigh,
           enableAudio: true,
         );
         await _cameraController!.initialize();
         if (mounted) setState(() {});
       }
     } catch (e) {
       print('Camera initialization error: $e');
     }
   }
 
   Future<void> _startRecording() async {
     await _initializeCamera();
@@ -343,176 +345,252 @@
                 decoration: BoxDecoration(
                   color: Colors.black.withOpacity(0.8),
                   borderRadius: BorderRadius.circular(12),
                 ),
                 child: Row(
                   mainAxisSize: MainAxisSize.min,
                   children: const [
                     Icon(Icons.touch_app, color: Colors.white),
                     SizedBox(width: 12),
                     Text(
                       'Chọn hình thức để bắt đầu',
                       style: TextStyle(
                         color: Colors.white,
                         fontSize: 16,
                         fontWeight: FontWeight.bold,
                       ),
                     ),
                   ],
                 ),
               ),
             ),
           // Bottom status
           if (_isRecording)
             Positioned(
               bottom: 100,
               left: 0,
               right: 0,
               child: Center(
                 child: Container(
                   padding:
                       const EdgeInsets.symmetric(horizontal: 20, vertical: 8),
                   decoration: BoxDecoration(
                     color: Colors.red.withOpacity(0.8),
                     borderRadius: BorderRadius.circular(20),
                   ),
                   child: Row(
                     mainAxisSize: MainAxisSize.min,
                     children: const [
                       Icon(Icons.fiber_manual_record,
                           color: Colors.white, size: 12),
                       SizedBox(width: 8),
                       Text(
                         'Đang quay video',
                         style: TextStyle(color: Colors.white),
                       ),
                     ],
                   ),
                 ),
               ),
             ),
+
+          if (_productName != null)
+            Positioned(
+              top: 120,
+              right: 0,
+              child: Center(
+                child: Container(
+                  padding:
+                      const EdgeInsets.symmetric(horizontal: 20, vertical: 8),
+                  decoration: BoxDecoration(
+                    color: Colors.black.withOpacity(0.7),
+                    borderRadius: BorderRadius.circular(12),
+                  ),
+                  child: Column(
+                    crossAxisAlignment: CrossAxisAlignment
+                        .start, //Canh nội dung sang phải màn hình
+                    children: [
+                      Text(
+                        'Sản phẩm:',
+                        style: TextStyle(
+                          color: Colors.white,
+                          fontSize: 18,
+                          fontWeight: FontWeight.bold,
+                        ),
+                      ),
+                      ..._productName!
+                          .split(', ')
+                          .map((product) => Text(
+                                product,
+                                style: TextStyle(
+                                  color: Colors.white,
+                                  fontSize: 16,
+                                ),
+                              ))
+                          .toList(),
+                    ],
+                  ),
+                ),
+              ),
+            ),
         ],
       ),
       bottomNavigationBar: _buildBottomBar(),
     );
   }
 
   Widget _buildModeButton(String label, IconData icon, bool isSelected) {
     return InkWell(
       onTap: _isRecording
           ? null
           : () {
               setState(() {
                 // Thay đổi trạng thái của _continuousRecording dựa trên lựa chọn
                 _continuousRecording = (label == 'Quay liên tục');
               });
             },
       child: Container(
         padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
         decoration: BoxDecoration(
           color: isSelected ? Colors.teal : Colors.black26,
           borderRadius: BorderRadius.circular(8),
           border: Border.all(
             color: isSelected ? Colors.tealAccent : Colors.transparent,
             width: 1,
           ),
         ),
         child: Row(
           mainAxisSize: MainAxisSize.min,
           children: [
             Icon(
               icon,
               color: isSelected ? Colors.white : Colors.grey,
               // Màu icon tùy thuộc vào trạng thái
               size: 20,
             ),
             const SizedBox(width: 8),
             Text(
               label,
               style: TextStyle(
                 color: isSelected ? Colors.white : Colors.grey,
                 // Màu chữ tùy thuộc vào trạng thái
                 fontSize: 14,
                 fontWeight: isSelected ? FontWeight.bold : FontWeight.normal,
               ),
             ),
           ],
         ),
       ),
     );
   }
 
   Widget _buildBottomBar() {
     return Container(
       color: Colors.black,
       padding: const EdgeInsets.all(16),
       child: SafeArea(
         child: ElevatedButton(
           onPressed: _isRecording ? _stopAndReset : null,
           style: ElevatedButton.styleFrom(
             backgroundColor: Colors.red,
             padding: const EdgeInsets.symmetric(vertical: 16),
             shape: RoundedRectangleBorder(
               borderRadius: BorderRadius.circular(12),
             ),
           ),
           child: Row(
             mainAxisAlignment: MainAxisAlignment.center,
             children: [
               Icon(_isRecording ? Icons.stop : Icons.videocam),
               const SizedBox(width: 8),
               Text(
                 _isRecording ? 'Dừng quay video' : 'Chờ quét mã',
                 style: const TextStyle(fontSize: 16),
               ),
             ],
           ),
         ),
       ),
     );
   }
 
   Widget _buildScanner() {
     return MobileScanner(
       controller: _scannerController,
       onDetect: _handleDetection,
     );
   }
 
   void _handleDeliveryOptionSelected(String option) {
     setState(() => _selectedDeliveryOption = option);
   }
 
   Future<void> _handleDetection(BarcodeCapture capture) async {
     final barcode = capture.barcodes.first;
     final String? code = barcode.rawValue;
 
     if (code != null) {
-      if (!_isRecording && code != STOP_CODE) {
-        // Chế độ quét bình thường
-        _isQRCode = barcode.format == BarcodeFormat.qrCode;
-        setState(() {
-          _isScanning = false;
-          _lastScannedCode = code;
-        });
+      // In ra thông tin chi tiết để debug
+      print('Raw Scanned Code: $code');
+      print('Barcode Format: ${barcode.format}');
 
-        // ScaffoldMessenger.of(context).showSnackBar(
-        //   SnackBar(
-        //       content: Text('${_isQRCode ? "QR Code" : "Barcode"}: $code')),
-        // );
+      // Kiểm tra xem mã có phải QR code không (nếu bạn chỉ muốn xử lý QR code)
+      if (barcode.format == BarcodeFormat.qrCode) {
+        // Validate product code
+        final productName = await ProductCodeService.validateProductCode(code);
 
-        try {
-          await _startRecording();
-        } catch (e) {
-          print('Error during recording: $e');
-        }
-      } else if (_isRecording && _continuousRecording && code == STOP_CODE) {
-        // Chỉ xử lý mã "STOP" khi quay liên tục
-        try {
-          await _stopAndReset();
-        } catch (e) {
-          print('Error during stopping: $e');
+        if (productName != null) {
+          setState(() {
+            _productName = productName;
+            _isQRCode = true;
+            _isScanning = false;
+            _lastScannedCode = code;
+          });
+
+          try {
+            await _startRecording();
+          } catch (e) {
+            print('Error during recording: $e');
+          }
+        } else {
+          // Hiển thị thông báo chi tiết hơn
+          ScaffoldMessenger.of(context).showSnackBar(
+            SnackBar(
+              content:
+                  Text('Mã QR không hợp lệ. Vui lòng kiểm tra lại. Mã: $code'),
+              backgroundColor: Colors.red,
+              duration: Duration(seconds: 3),
+            ),
+          );
         }
       }
     }
+    // if (code != null) {
+    //   if (!_isRecording && code != STOP_CODE) {
+    //     // Chế độ quét bình thường
+    //     _isQRCode = barcode.format == BarcodeFormat.qrCode;
+    //     setState(() {
+    //       _isScanning = false;
+    //       _lastScannedCode = code;
+    //     });
+
+    //     // ScaffoldMessenger.of(context).showSnackBar(
+    //     //   SnackBar(
+    //     //       content: Text('${_isQRCode ? "QR Code" : "Barcode"}: $code')),
+    //     // );
+
+    //     try {
+    //       await _startRecording();
+    //     } catch (e) {
+    //       print('Error during recording: $e');
+    //     }
+    //   } else if (_isRecording && _continuousRecording && code == STOP_CODE) {
+    //     // Chỉ xử lý mã "STOP" khi quay liên tục
+    //     try {
+    //       await _stopAndReset();
+    //     } catch (e) {
+    //       print('Error during stopping: $e');
+    //     }
+    //   }
+    // }
   }
 }
